#include "stdafx.h"
#include "../src/NWar.cpp"

using namespace System;
using namespace System::Text;
using namespace System::Collections::Generic;
using namespace Microsoft::VisualStudio::TestTools::UnitTesting;

namespace spec
{
	[TestClass]
	public ref class NWarSpec
	{
	private:
		TestContext^ testContextInstance;

	public:
		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		property Microsoft::VisualStudio::TestTools::UnitTesting::TestContext^ TestContext
		{
			Microsoft::VisualStudio::TestTools::UnitTesting::TestContext^ get()
			{
				return testContextInstance;
			}
			System::Void set(Microsoft::VisualStudio::TestTools::UnitTesting::TestContext^ value)
			{
				testContextInstance = value;
			}
		};

#pragma region Additional test attributes

#pragma endregion 


		void CompareArraysSpecP4(int *expectedArray, int *actualArray, int len){
			int i = 0;
			for (i = 0; i < len; i++){
				Assert::AreEqual(expectedArray[i], actualArray[i], L"Failed in Comparing Array Elements ", 1, 2);
			}
		}

		void CompareIntSpecP4(int expected, int actual){
			Assert::AreEqual(expected, actual, L"Failed for Comparing Ints  ", 1, 2);
		}
		[TestMethod, Timeout(1000)]
		void NWarSample1_TestCase()
		{
			int *actualArray = getSquareLeaderArray(NULL, -1, NULL);
			if (actualArray != NULL){
				Assert::Fail();
			}
		};

		[TestMethod, Timeout(1000)]
		void NWarSample2_TestCase()
		{
			int arr[10] = { 1, 5, 10, 89, 145, 204, 5555, 2342, 1234, 999 };
			int len = 10;
			int ansLen = 0;
			int expectedArray[100] = { 1, 10, 5555 };
			int expectedLen = 3;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};

		[TestMethod, Timeout(1000)]
		void NWarSample3_TestCase()
		{
			int arr[10] = { 444, 444, 367, 445, 134, 103, 219, 983, 999, 950 };
			int len = 10;
			int ansLen = 0;
			int expectedArray[100] = { 367, 103, 219 };
			int expectedLen = 3;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};


		//Real Test Cases
		[TestMethod, Timeout(1000)]
		void NWar1_TestCase()
		{
			int arr[10] = { 442, 444, 367, 445, 134, 103, 219, 983, 999, 950 };
			int len = 9;
			int ansLen = 0;
			int expectedArray[100] = { 367, 103, 219 };
			int expectedLen = 3;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};
		//Real Test Cases
		[TestMethod, Timeout(1000)]
		void NWar2_TestCase()
		{
			int arr[10] = { 442, 444, 367, 445, 134, 103, 219, 983, 999, 950 };
			int len = 9;
			int ansLen = 0;
			int expectedArray[100] = { 367, 103, 219 };
			int expectedLen = 3;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};
		//Real Test Cases
		[TestMethod, Timeout(1000)]
		void NWar3_TestCase()
		{
			int arr[10] = { 442, 444, 367, 445, 134, 103, 219, 983, 999, 950 };
			int len = 9;
			int ansLen = 0;
			int expectedArray[100] = { 367, 103, 219 };
			int expectedLen = 3;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};

		[TestMethod, Timeout(1000)]
		void NWar4_TestCase()
		{
			int arr[10] = { 0, 0, 0, 0, 367, 0, 0, 0, 0, 0 };
			int len = 9;
			int ansLen = 0;
			int expectedArray[100] = { 367 };
			int expectedLen = 1;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};

		[TestMethod, Timeout(1000)]
		void NWar5_TestCase()
		{
			int arr[10] = { 0, 0, 0, 0, 367, 0, 0, 0, 0, 0 };
			int len = 9;
			int ansLen = 0;
			int expectedArray[100] = { 367 };
			int expectedLen = 1;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};
		[TestMethod, Timeout(1000)]
		void NWar6_TestCase()
		{
			int arr[10] = { 0, 0, 0, 0, 367, 0, 0, 0, 0, 0 };
			int len = 9;
			int ansLen = 0;
			int expectedArray[100] = { 367 };
			int expectedLen = 1;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};

		[TestMethod, Timeout(1000)]
		void NWar7_TestCase()
		{
			int arr[100] = { 2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275 };
			int len = 14;
			int ansLen = 0;
			int expectedArray[100] = { 20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275, };
			int expectedLen = 8;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};
		[TestMethod, Timeout(1000)]
		void NWar8_TestCase()
		{
			int arr[100] = { 2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275 };
			int len = 14;
			int ansLen = 0;
			int expectedArray[100] = { 20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275, };
			int expectedLen = 8;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};
		[TestMethod, Timeout(1000)]
		void NWar9_TestCase()
		{
			int arr[100] = { 2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275 };
			int len = 14;
			int ansLen = 0;
			int expectedArray[100] = { 20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275, };
			int expectedLen = 8;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};
		[TestMethod, Timeout(1000)]
		void NWar10_TestCase()
		{
			int arr[100] = { 2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275, };
			int len = 14 * 4;
			int ansLen = 0;
			int expectedArray[100] = { 20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275, };
			int expectedLen = 32;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};

		[TestMethod, Timeout(1000)]
		void NWar11_TestCase()
		{
			int arr[1000] = { 2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275, };
			int len = 14 * 13;
			int ansLen = 0;
			int expectedArray[200] = { 20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275, };
			int expectedLen = 8 * 13;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};
		[TestMethod, Timeout(1000)]
		void NWar12_TestCase()
		{
			int arr[1000] = { 2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275, };
			int len = 14 * 13;
			int ansLen = 0;
			int expectedArray[200] = { 20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275, };
			int expectedLen = 8 * 13;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};
		[TestMethod, Timeout(1000)]
		void NWar13_TestCase()
		{
			int arr[1000] = { 2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275,
				2, 20224, 20993, 20993, 0, 20242, 20245, 20254, 20257, 20258, 20993, 20993, 20260, 20275, };
			int len = 14 * 13;
			int ansLen = 0;
			int expectedArray[200] = { 20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275,
				20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275, };
			int expectedLen = 8 * 13;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);
		};

		void runLargeTestCase(){

			int arr[10000] = { 0 };
			int len = 10000;
			int i = 0;
			for (i = 0; i < len; i++){
				arr[i] = i + 20000;
			}
			int ansLen = 0;

			int expectedArray[2000] = {
				20003, 20008, 20019, 20026, 20030, 20036, 20039, 20062, 20063, 20080, 20091, 20093, 20109, 20111, 20112, 20115, 20118, 20121, 20122, 20133, 20147, 20151, 20157, 20158, 20174, 20175, 20177, 20181,
				20185, 20188, 20190, 20199, 20206, 20211, 20212, 20221, 20224, 20242, 20245, 20254, 20257, 20258, 20260, 20275, 20285, 20300, 20306, 20309, 20313, 20331, 20333, 20338, 20339, 20360, 20369, 20383,
				20390, 20393, 20396, 20417, 20422, 20425, 20448, 20452, 20455, 20457, 20458, 20471, 20475, 20478, 20484, 20485, 20487, 20511, 20517, 20518, 20524, 20527, 20528, 20542, 20545, 20547, 20548, 20554,
				20555, 20557, 20568, 20571, 20572, 20574, 20575, 20581, 20582, 20584, 20586, 20602, 20603, 20620, 20630, 20639, 20658, 20685, 20693, 20714, 20715, 20717, 20725, 20741, 20745, 20748, 20751, 20752,
				20754, 20755, 20771, 20784, 20800, 20811, 20815, 20818, 20825, 20833, 20844, 20845, 20847, 20851, 20852, 20854, 20856, 20865, 20874, 20881, 20899, 20901, 20903, 20910, 20919, 20930, 20933, 20936,
				20963, 20989, 20991, 20998, 21009, 21011, 21012, 21015, 21018, 21021, 21022, 21033, 21047, 21051, 21057, 21058, 21074, 21075, 21077, 21081, 21085, 21088, 21090, 21099, 21101, 21102, 21105, 21108,
				21110, 21114, 21115, 21120, 21123, 21129, 21132, 21134, 21138, 21141, 21143, 21148, 21149, 21150, 21151, 21167, 21176, 21180, 21183, 21184, 21192, 21194, 21201, 21202, 21210, 21213, 21219, 21220,
				21226, 21229, 21231, 21238, 21256, 21262, 21265, 21267, 21268, 21276, 21279, 21283, 21286, 21291, 21292, 21297, 21303, 21312, 21314, 21318, 21321, 21328, 21330, 21333, 21341, 21347, 21348, 21358,
				21366, 21374, 21381, 21382, 21384, 21385, 21399, 21407, 21411, 21413, 21418, 21419, 21431, 21437, 21438, 21447, 21456, 21465, 21470, 21473, 21474, 21481, 21483, 21491, 21501, 21507, 21508, 21510,
				21511, 21526, 21538, 21546, 21556, 21562, 21564, 21565, 21568, 21570, 21580, 21583, 21586, 21599, 21617, 21622, 21625, 21627, 21628, 21636, 21645, 21652, 21654, 21655, 21658, 21663, 21671, 21672,
				21677, 21682, 21685, 21699, 21704, 21705, 21707, 21716, 21726, 21729, 21734, 21740, 21743, 21744, 21750, 21761, 21762, 21767, 21770, 21776, 21778, 21787, 21792, 21801, 21805, 21808, 21810, 21813,
				21814, 21823, 21826, 21831, 21832, 21834, 21835, 21841, 21843, 21850, 21853, 21856, 21862, 21865, 21877, 21880, 21900, 21909, 21912, 21914, 21921, 21922, 21927, 21939, 21941, 21959, 21969, 21972,
				21990, 21993, 21995, 21996, 22006, 22011, 22012, 22021, 22024, 22042, 22045, 22054, 22057, 22058, 22060, 22075, 22085, 22101, 22102, 22110, 22113, 22119, 22120, 22126, 22129, 22131, 22138, 22156,
				22162, 22165, 22167, 22168, 22176, 22179, 22183, 22186, 22191, 22192, 22197, 22201, 22204, 22210, 22216, 22219, 22224, 22229, 22237, 22240, 22242, 22244, 22249, 22257, 22261, 22267, 22269, 22273,
				22275, 22276, 22291, 22292, 22294, 22296, 22311, 22318, 22327, 22344, 22347, 22348, 22357, 22372, 22374, 22375, 22378, 22381, 22384, 22387, 22402, 22405, 22420, 22422, 22424, 22429, 22434, 22437,
				22438, 22442, 22443, 22450, 22459, 22467, 22473, 22476, 22483, 22492, 22495, 22504, 22507, 22508, 22516, 22527, 22537, 22540, 22549, 22556, 22559, 22561, 22565, 22568, 22570, 22572, 22573, 22580,
				22586, 22594, 22595, 22600, 22612, 22615, 22617, 22618, 22621, 22627, 22629, 22647, 22651, 22655, 22658, 22667, 22671, 22672, 22674, 22676, 22681, 22685, 22692, 22705, 22716, 22719, 22723, 22725,
				22726, 22732, 22734, 22735, 22738, 22743, 22746, 22750, 22752, 22753, 22761, 22762, 22764, 22766, 22783, 22791, 22799, 22805, 22813, 22816, 22831, 22834, 22837, 22843, 22850, 22856, 22861, 22865,
				22873, 22911, 22912, 22917, 22921, 22922, 22924, 22926, 22942, 22945, 22954, 22955, 22962, 22971, 22979, 22997, 23000, 23006, 23009, 23013, 23031, 23033, 23038, 23039, 23060, 23069, 23083, 23090,
				23093, 23096, 23103, 23112, 23114, 23118, 23121, 23128, 23130, 23133, 23141, 23147, 23148, 23158, 23166, 23174, 23181, 23182, 23184, 23185, 23199, 23211, 23218, 23227, 23244, 23247, 23248, 23257,
				23272, 23274, 23275, 23278, 23281, 23284, 23287, 23301, 23303, 23308, 23309, 23310, 23313, 23330, 23331, 23366, 23369, 23380, 23389, 23390, 23396, 23398, 23411, 23417, 23418, 23424, 23427, 23428,
				23442, 23445, 23447, 23448, 23454, 23455, 23457, 23468, 23471, 23472, 23474, 23475, 23481, 23482, 23484, 23486, 23518, 23527, 23544, 23545, 23547, 23554, 23572, 23574, 23581, 23600, 23609, 23616,
				23636, 23639, 23648, 23661, 23663, 23684, 23690, 23693, 23714, 23722, 23724, 23725, 23728, 23741, 23742, 23744, 23745, 23752, 23754, 23779, 23782, 23788, 23797, 23803, 23811, 23812, 23814, 23815,
				23821, 23824, 23827, 23830, 23839, 23841, 23842, 23844, 23846, 23851, 23864, 23872, 23878, 23887, 23893, 23899, 23900, 23903, 23906, 23919, 23930, 23936, 23938, 23960, 23963, 23977, 23983, 23989,
				23991, 23998, 24017, 24022, 24025, 24048, 24052, 24055, 24057, 24058, 24071, 24075, 24078, 24084, 24085, 24087, 24107, 24111, 24113, 24118, 24119, 24131, 24137, 24138, 24147, 24156, 24165, 24170,
				24173, 24174, 24181, 24183, 24191, 24202, 24205, 24220, 24222, 24224, 24229, 24234, 24237, 24238, 24242, 24243, 24250, 24259, 24267, 24273, 24276, 24283, 24292, 24295, 24311, 24317, 24318, 24324,
				24327, 24328, 24342, 24345, 24347, 24348, 24354, 24355, 24357, 24368, 24371, 24372, 24374, 24375, 24381, 24382, 24384, 24386, 24408, 24417, 24422, 24423, 24432, 24435, 24437, 24438, 24444, 24449,
				24453, 24455, 24456, 24465, 24471, 24473, 24480, 24483, 24494, 24502, 24505, 24507, 24508, 24516, 24520, 24529, 24534, 24535, 24537, 24543, 24545, 24546, 24550, 24553, 24554, 24561, 24564, 24567,
				24570, 24573, 24576, 24580, 24589, 24592, 24598, 24615, 24627, 24638, 24645, 24651, 24654, 24657, 24672, 24675, 24683, 24701, 24705, 24708, 24710, 24713, 24714, 24723, 24726, 24731, 24732, 24734,
				24735, 24741, 24743, 24750, 24753, 24756, 24762, 24765, 24777, 24780, 24804, 24805, 24807, 24811, 24813, 24823, 24831, 24832, 24834, 24836, 24840, 24843, 24850, 24859, 24863, 24870, 24895, 24911,
				24922, 24925, 24944, 24952, 24958, 24985, 24999, 25011, 25017, 25018, 25024, 25027, 25028, 25042, 25045, 25047, 25048, 25054, 25055, 25057, 25068, 25071, 25072, 25074, 25075, 25081, 25082, 25084,
				25086, 25101, 25107, 25108, 25110, 25111, 25126, 25138, 25146, 25156, 25162, 25164, 25165, 25168, 25170, 25180, 25183, 25186, 25199, 25204, 25207, 25208, 25216, 25227, 25237, 25240, 25249, 25256,
				25259, 25261, 25265, 25268, 25270, 25272, 25273, 25280, 25286, 25294, 25295, 25318, 25327, 25344, 25345, 25347, 25354, 25372, 25374, 25381, 25402, 25405, 25407, 25408, 25416, 25420, 25429, 25434,
				25435, 25437, 25443, 25445, 25446, 25450, 25453, 25454, 25461, 25464, 25467, 25470, 25473, 25476, 25480, 25489, 25492, 25498, 25504, 25505, 25507, 25516, 25526, 25529, 25534, 25540, 25543, 25544,
				25550, 25561, 25562, 25567, 25570, 25576, 25578, 25587, 25592, 25608, 25612, 25614, 25615, 25618, 25621, 25625, 25628, 25641, 25644, 25647, 25651, 25652, 25657, 25674, 25675, 25680, 25681, 25682,
				25688, 25701, 25702, 25704, 25705, 25710, 25720, 25722, 25723, 25732, 25734, 25740, 25743, 25746, 25750, 25756, 25758, 25764, 25765, 25777, 25779, 25785, 25797, 25801, 25802, 25804, 25806, 25810,
				25813, 25816, 25820, 25826, 25831, 25840, 25849, 25857, 25860, 25861, 25862, 25868, 25875, 25886, 25894, 25919, 25924, 25925, 25942, 25948, 25952, 25977, 25984, 25991, 26002, 26003, 26020, 26030,
				26039, 26058, 26085, 26093, 26117, 26122, 26125, 26127, 26128, 26136, 26145, 26152, 26154, 26155, 26158, 26163, 26171, 26172, 26177, 26182, 26185, 26199, 26200, 26212, 26215, 26217, 26218, 26221,
				26227, 26229, 26247, 26251, 26255, 26258, 26267, 26271, 26272, 26274, 26276, 26281, 26285, 26292, 26300, 26309, 26316, 26336, 26339, 26348, 26361, 26363, 26384, 26390, 26393, 26415, 26427, 26438,
				26445, 26451, 26454, 26457, 26472, 26475, 26483, 26508, 26512, 26514, 26515, 26518, 26521, 26525, 26528, 26541, 26544, 26547, 26551, 26552, 26557, 26574, 26575, 26580, 26581, 26582, 26588, 26613,
				26627, 26631, 26633, 26668, 26669, 26672, 26686, 26696, 26711, 26712, 26717, 26721, 26722, 26724, 26726, 26742, 26745, 26754, 26755, 26762, 26771, 26779, 26797, 26805, 26812, 26815, 26821, 26825,
				26834, 26843, 26850, 26851, 26852, 26858, 26866, 26885, 26903, 26919, 26922, 26930, 26933, 26966, 26977, 26991, 27014, 27015, 27017, 27025, 27041, 27045, 27048, 27051, 27052, 27054, 27055, 27071,
				27084, 27104, 27105, 27107, 27116, 27126, 27129, 27134, 27140, 27143, 27144, 27150, 27161, 27162, 27167, 27170, 27176, 27178, 27187, 27192, 27205, 27216, 27219, 27223, 27225, 27226, 27232, 27234,
				27235, 27238, 27243, 27246, 27250, 27252, 27253, 27261, 27262, 27264, 27266, 27283, 27291, 27299, 27314, 27322, 27324, 27325, 27328, 27341, 27342, 27344, 27345, 27352, 27354, 27379, 27382, 27388,
				27397, 27401, 27405, 27408, 27410, 27413, 27414, 27423, 27426, 27431, 27432, 27434, 27435, 27441, 27443, 27450, 27453, 27456, 27462, 27465, 27477, 27480, 27501, 27502, 27504, 27505, 27510, 27520,
				27522, 27523, 27532, 27534, 27540, 27543, 27546, 27550, 27556, 27558, 27564, 27565, 27577, 27579, 27585, 27597, 27611, 27612, 27617, 27621, 27622, 27624, 27626, 27642, 27645, 27654, 27655, 27662,
				27671, 27679, 27697, 27701, 27710, 27716, 27718, 27739, 27747, 27757, 27759, 27761, 27769, 27774, 27775, 27781, 27788, 27793, 27795, 27796, 27804, 27817, 27823, 27832, 27838, 27840, 27855, 27871,
				27878, 27883, 27887, 27889, 27898, 27912, 27921, 27929, 27937, 27957, 27967, 27973, 27975, 27976, 27988, 27992, 28000, 28011, 28015, 28018, 28025, 28033, 28044, 28045, 28047, 28051, 28052, 28054,
				28056, 28065, 28074, 28081, 28099, 28101, 28105, 28108, 28110, 28113, 28114, 28123, 28126, 28131, 28132, 28134, 28135, 28141, 28143, 28150, 28153, 28156, 28162, 28165, 28177, 28180, 28205, 28213,
				28216, 28231, 28234, 28237, 28243, 28250, 28256, 28261, 28265, 28273, 28303, 28311, 28312, 28314, 28315, 28321, 28324, 28327, 28330, 28339, 28341, 28342, 28344, 28346, 28351, 28364, 28372, 28378,
				28387, 28393, 28399, 28404, 28405, 28407, 28411, 28413, 28423, 28431, 28432, 28434, 28436, 28440, 28443, 28450, 28459, 28463, 28470, 28495, 28501, 28502, 28504, 28506, 28510, 28513, 28516, 28520,
				28526, 28531, 28540, 28549, 28557, 28560, 28561, 28562, 28568, 28575, 28586, 28594, 28605, 28612, 28615, 28621, 28625, 28634, 28643, 28650, 28651, 28652, 28658, 28666, 28685, 28704, 28717, 28723,
				28732, 28738, 28740, 28755, 28771, 28778, 28783, 28787, 28789, 28798, 28801, 28810, 28837, 28856, 28865, 28873, 28877, 28879, 28897, 28909, 28933, 28939, 28945, 28954, 28978, 28987, 28990, 28993,
				29001, 29003, 29010, 29019, 29030, 29033, 29036, 29063, 29089, 29091, 29098, 29100, 29109, 29112, 29114, 29121, 29122, 29127, 29139, 29141, 29159, 29169, 29172, 29190, 29193, 29195, 29196, 29211,
				29212, 29217, 29221, 29222, 29224, 29226, 29242, 29245, 29254, 29255, 29262, 29271, 29279, 29297, 29300, 29303, 29306, 29319, 29330, 29336, 29338, 29360, 29363, 29377, 29383, 29389, 29391, 29398,
				29411, 29422, 29425, 29444, 29452, 29458, 29485, 29499, 29519, 29524, 29525, 29542, 29548, 29552, 29577, 29584, 29591, 29603, 29619, 29622, 29630, 29633, 29666, 29677, 29691, 29712, 29721, 29729,
				29737, 29757, 29767, 29773, 29775, 29776, 29788, 29792, 29809, 29833, 29839, 29845, 29854, 29878, 29887, 29890, 29893, 29901, 29908, 29910, 29913, 29915, 29916, 29927, 29931, 29938, 29949, 29951,
				29961, 29972, 29980, 29983, 29994
			};
			int expectedLen = 1601;

			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedArray, ans, expectedLen);

		}
		[TestMethod, Timeout(1000)]
		void NWar14_TestCase()
		{

			runLargeTestCase();
			runLargeTestCase();
		};
		[TestMethod, Timeout(1000)]
		void NWar15_TestCase()
		{

			runLargeTestCase();
			runLargeTestCase();
		};
		[TestMethod, Timeout(1000)]
		void NWar16_TestCase()
		{

			runLargeTestCase();
			runLargeTestCase();
		};
		[TestMethod, Timeout(1000)]
		void NWar17_TestCase()
		{

			runLargeTestCase();
			runLargeTestCase();
		};
		[TestMethod, Timeout(1000)]
		void NWar18_TestCase()
		{

			runLargeTestCase();
			runLargeTestCase();
		};

		void runLargeTestCase2(){
			int arr[20000];
			int expectedAns[10000];
			int len = 20000;
			int i = 0;
			int smallCorrectAns[5] = { 31663, 31679, 31697, 31699, 31703 };
			int smallWrongAns[5] = { 31664, 31664, 31664, 31664, 31664 };
			int totalElems = 0;
			int expectedLen = 0;
			for (i = 0; i < 4000; i++){
				if (i % 2){
					int j = 0;
					for (j = 0; j < 5; j++){
						arr[totalElems] = smallCorrectAns[j];
						totalElems++;
						expectedAns[expectedLen] = smallCorrectAns[j];
						expectedLen++;
					}
				}
				else{
					int j = 0;
					for (j = 0; j < 5; j++){
						arr[totalElems] = smallWrongAns[j];
						totalElems++;
					}
				}
			}
			len = totalElems;
			int ansLen = 0;
			int *ans = getSquareLeaderArray(arr, len, &ansLen);

			CompareIntSpecP4(expectedLen, ansLen);
			CompareArraysSpecP4(expectedAns, ans, expectedLen);

		}

		[TestMethod, Timeout(1000)]
		void NWar19_TestCase()
		{

			runLargeTestCase2();
			runLargeTestCase2();
			runLargeTestCase2();
		};
		[TestMethod, Timeout(1000)]
		void NWar20_TestCase()
		{

			runLargeTestCase2();
			runLargeTestCase2();
			runLargeTestCase2();
		};
		[TestMethod, Timeout(1000)]
		void NWar21_TestCase()
		{

			runLargeTestCase2();
			runLargeTestCase2();
			runLargeTestCase2();
		};
		[TestMethod, Timeout(1000)]
		void NWar22_TestCase()
		{

			runLargeTestCase2();
			runLargeTestCase2();
			runLargeTestCase2();
		};
	};
}
