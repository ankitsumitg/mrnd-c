#include "stdafx.h"
#include "../src/PairUp.cpp"

using namespace System;
using namespace System::Text;
using namespace System::Collections::Generic;
using namespace Microsoft::VisualStudio::TestTools::UnitTesting;

namespace spec
{
	[TestClass]
	public ref class PairUpSpec
	{
	private:
		TestContext^ testContextInstance;

	public:
		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		property Microsoft::VisualStudio::TestTools::UnitTesting::TestContext^ TestContext
		{
			Microsoft::VisualStudio::TestTools::UnitTesting::TestContext^ get()
			{
				return testContextInstance;
			}
			System::Void set(Microsoft::VisualStudio::TestTools::UnitTesting::TestContext^ value)
			{
				testContextInstance = value;
			}
		};

#pragma region Additional test attributes
		//
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//[ClassInitialize()]
		//static void MyClassInitialize(TestContext^ testContext) {};
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//[ClassCleanup()]
		//static void MyClassCleanup() {};
		//
		//Use TestInitialize to run code before running each test
		//[TestInitialize()]
		//void MyTestInitialize() {};
		//
		//Use TestCleanup to run code after each test has run
		//[TestCleanup()]
		//void MyTestCleanup() {};
		//
#pragma endregion


		struct ListNode *createNode_P6(int val){
			struct ListNode *newNode = (struct ListNode *)malloc(sizeof(struct ListNode));
			newNode->next = NULL;
			newNode->val = val;
			return newNode;
		}

		struct ListNode* createList_P6(char *s){
			int i;
			struct ListNode *walker = NULL;
			struct ListNode *head = createNode_P6(s[0]);
			walker = head;
			for (i = 1; s[i] != '\0'; i++){
				walker->next = createNode_P6(s[i]);
				walker = walker->next;
			}

			return head;
		}

		void createDataAndTest_P6(char *input, char *expectedOutput) {
			struct ListNode * head = createList_P6(input);
			pairUp(head);

			char actualStr[510] = "";
			int i = 0;

			while (head){
				actualStr[i] = (head->val);
				head = head->next;
				i++;
			}

			i = 0;
			while (expectedOutput[i] != '\0' || actualStr[i] != '\0'){
				Assert::AreEqual(expectedOutput[i], actualStr[i], "Failed in Problem 6 ,Links not properly handled", 1, 2);
				i++;
			}

		}

		[TestMethod, Timeout(1000)]
		void TCS1_PairUp()
		{
			pairUp(NULL);

		};

		[TestMethod, Timeout(1000)]
		void TCS2_PairUp()
		{
			createDataAndTest_P6("123456", "162534");
		};

		[TestMethod, Timeout(1000)]
		void TCS3_PairUp()
		{
			createDataAndTest_P6("912354786", "961827345");
		};
		/*
		Hidded Tests : Count 17

		*/

		[TestMethod, Timeout(1000)]
		void TC0_PairUp()
		{
			pairUp(NULL);
			createDataAndTest_P6("1111111112", "1211111111");
		};

		[TestMethod, Timeout(1000)]
		void TC1_PairUp()
		{
			createDataAndTest_P6("1111111111", "1111111111");
		};

		[TestMethod, Timeout(1000)]
		void TC2_PairUp()
		{
			createDataAndTest_P6("144862489614896158963259648961561896258962586289624896148961489629674123698521478523698521478523698524785269852", "124548896622458897641245889966135285986734215295684986936215586714819265285986936221548766298296692844819669184");
		};

		[TestMethod, Timeout(1000)]
		void TC3_PairUp()
		{
			createDataAndTest_P6("1448624896148961589632596489615618962589625862896248961489614896296741236985214785236985214785236985247852698521", "1142458869264285986714428598691653829568372451926548899663125568178491622558899663225184672689926629488491661948");
		};

		[TestMethod, Timeout(1000)]
		void TC4_PairUp()
		{
			createDataAndTest_P6("144862489614896158963745698745845874584587458474126874126668523987412982396321743965888888888888888888888888888888888888888888888888888888888888888888777777777777777777777777777777777777777777777777777777777777444444444444444444444444444444444444444444444555555555555555555555555555555555555555555555555555555555556666666666666666666666666666666666666666666666662596489615618962589625862896248961489614896296741236985214785236985214785236985247852698521", "114245886926428598671442859869165382956837744152659889764352854857847142558849568372415487467942162968847146192864616689582432968978421628958226399865322619784136956156898884868985828686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868585858585858585858585757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575747474747474747474747474444444444444444444444444444444444");
		};

		[TestMethod, Timeout(1000)]
		void TC5_PairUp()
		{
			createDataAndTest_P6("144862455555555555555555555555555555551111111111111111166666666666666555555555555555555555555555555555444444444444444444444444444411111111111111111111111111111111111111111111896148961589637456987458458745845874584741268741266685239874129823963217439658888888888888888888888888888888888888888888888888888888888888888887777777777777777777777777777777777777777777777777777777777774444444444444444444444444444444444444444444445555555555555555555555555555555555555555555555555555555555566666666666666666667", "174646866626465656565656565656565656565655555555555555555555555555555555555515151515151515151515151515151515156565656565656565656565656565555555555555555555555454545454545454545454545454545454545454545454444444444444444444444444444444444444444444444747474747471717171717171717171717171717171717171717171717171717171717171717171717171717171717171717879767174787976717578898683878485868988878485888485888784858884858887848588848784818286888784818286868688858283898887848182898882838986838281878483898685");
		};

		[TestMethod, Timeout(1000)]
		void TC6_PairUp()
		{
			createDataAndTest_P6("1", "1");
		};

		[TestMethod, Timeout(1000)]
		void TC7_PairUp()
		{
			createDataAndTest_P6("1", "1");
			createDataAndTest_P6("912354786", "961827345");
		};

		[TestMethod, Timeout(1000)]
		void TC8_PairUp()
		{
			createDataAndTest_P6("144862455555555555555555555555555555551111111111111111166666666666666555555555555555555555555555555555444444444444444444444444444411111111111111111111111111111111111111111111896148961589637456987458458745845874584741268741266685239874129823963217439658888888888888888888888888888888888888888888888888888888888888888887777777777777777777777777777777777777777777777777777777777774444444444444444444444444444444444444444444445555555555555555555555555555555555555555555555555555555555566666666666666666667", "174646866626465656565656565656565656565655555555555555555555555555555555555515151515151515151515151515151515156565656565656565656565656565555555555555555555555454545454545454545454545454545454545454545454444444444444444444444444444444444444444444444747474747471717171717171717171717171717171717171717171717171717171717171717171717171717171717171717879767174787976717578898683878485868988878485888485888784858884858887848588848784818286888784818286868688858283898887848182898882838986838281878483898685");
		};
		[TestMethod, Timeout(1000)]
		void TC9_PairUp()
		{
			createDataAndTest_P6("144862489614896158963259648961561896258962586289624896148961489629674123698521478523698521478523698524785269852", "124548896622458897641245889966135285986734215295684986936215586714819265285986936221548766298296692844819669184");
		};

		[TestMethod, Timeout(1000)]
		void TC10_PairUp()
		{
			createDataAndTest_P6("1448624896148961589632596489615618962589625862896248961489614896296741236985214785236985214785236985247852698521", "1142458869264285986714428598691653829568372451926548899663125568178491622558899663225184672689926629488491661948");
		};

		[TestMethod, Timeout(1000)]
		void TC11_PairUp()
		{
			createDataAndTest_P6("144862489614896158963745698745845874584587458474126874126668523987412982396321743965888888888888888888888888888888888888888888888888888888888888888888777777777777777777777777777777777777777777777777777777777777444444444444444444444444444444444444444444444555555555555555555555555555555555555555555555555555555555556666666666666666666666666666666666666666666666662596489615618962589625862896248961489614896296741236985214785236985214785236985247852698521", "114245886926428598671442859869165382956837744152659889764352854857847142558849568372415487467942162968847146192864616689582432968978421628958226399865322619784136956156898884868985828686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868585858585858585858585757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575747474747474747474747474444444444444444444444444444444444");
		};

		[TestMethod, Timeout(1000)]
		void TC12_PairUp()
		{
			createDataAndTest_P6("144862455555555555555555555555555555551111111111111111166666666666666555555555555555555555555555555555444444444444444444444444444411111111111111111111111111111111111111111111896148961589637456987458458745845874584741268741266685239874129823963217439658888888888888888888888888888888888888888888888888888888888888888887777777777777777777777777777777777777777777777777777777777774444444444444444444444444444444444444444444445555555555555555555555555555555555555555555555555555555555566666666666666666667", "174646866626465656565656565656565656565655555555555555555555555555555555555515151515151515151515151515151515156565656565656565656565656565555555555555555555555454545454545454545454545454545454545454545454444444444444444444444444444444444444444444444747474747471717171717171717171717171717171717171717171717171717171717171717171717171717171717171717879767174787976717578898683878485868988878485888485888784858884858887848588848784818286888784818286868688858283898887848182898882838986838281878483898685");
		};

		[TestMethod, Timeout(1000)]
		void TC13_PairUp()
		{
			createDataAndTest_P6("12300456", "16253400");
		};

		[TestMethod, Timeout(1000)]
		void TC14_PairUp()
		{
			createDataAndTest_P6("19123547861", "11961827345");
		};

		[TestMethod, Timeout(1000)]
		void TC15_PairUp()
		{
			createDataAndTest_P6("144862489614896158963745698745845874584587458474126874126668523987412982396321743965888888888888888888888888888888888888888888888888888888888888888888777777777777777777777777777777777777777777777777777777777777444444444444444444444444444444444444444444444555555555555555555555555555555555555555555555555555555555556666666666666666666666666666666666666666666666662596489615618962589625862896248961489614896296741236985214785236985214785236985247852698521", "114245886926428598671442859869165382956837744152659889764352854857847142558849568372415487467942162968847146192864616689582432968978421628958226399865322619784136956156898884868985828686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868686868585858585858585858585757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575747474747474747474747474444444444444444444444444444444444");
		};

		[TestMethod, Timeout(1000)]
		void TC16_PairUp()
		{
			createDataAndTest_P6("144862455555555555555555555555555555551111111111111111166666666666666555555555555555555555555555555555444444444444444444444444444411111111111111111111111111111111111111111111896148961589637456987458458745845874584741268741266685239874129823963217439658888888888888888888888888888888888888888888888888888888888888888887777777777777777777777777777777777777777777777777777777777774444444444444444444444444444444444444444444445555555555555555555555555555555555555555555555555555555555566666666666666666667", "174646866626465656565656565656565656565655555555555555555555555555555555555515151515151515151515151515151515156565656565656565656565656565555555555555555555555454545454545454545454545454545454545454545454444444444444444444444444444444444444444444444747474747471717171717171717171717171717171717171717171717171717171717171717171717171717171717171717879767174787976717578898683878485868988878485888485888784858884858887848588848784818286888784818286868688858283898887848182898882838986838281878483898685");
		};
	};
}
